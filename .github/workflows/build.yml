name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  setup:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    # Cache NuGet dependencies
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore

  build:
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: '**/obj'
        key: obj-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          obj-${{ runner.os }}-

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Build
      run: dotnet build --no-restore

    - name: Publish
      run: dotnet publish -c Release -o ./publish

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: published-app
        path: ./publish

  test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Test
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./TestResults/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: published-app
        path: ./publish

    - name: Get current tag
      id: get_tag
      run: |
        TAG=$(git describe --tags --exact-match 2>/dev/null || echo "")
        echo "::set-output name=tag::$TAG"

    - name: Create GitHub Release
      id: create_release
      if: steps.get_tag.outputs.tag != ''
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        release_name: Release ${{ steps.get_tag.outputs.tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: steps.get_tag.outputs.tag != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish
        asset_name: published-app.zip
        asset_content_type: application/zip

    - name: Deploy
      run: |
        echo "Deploying application..."
        # Add your deployment script/commands here
        # For example, you can use rsync, scp, or any other deployment tool
        # rsync -avz ./publish/ user@server:/path/to/deploy
        # scp -r ./publish/ user@server:/path/to/deploy
        # Or use a deployment tool like Azure CLI, AWS CLI, etc.





